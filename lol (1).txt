.model --> quanto de espaço armazenar | small --> 16 bits
.data --> oq colocar na RAM
db == 16 bits--> guarda o endereço de memoria 
AH --> onde fica as funções 
09h --> func printf para DX
int 21h --> executa tudo que está no endereço AH
TIPO X --> 16 bits
ds --> registrador interno
01h --> func para entrar caracter | entrada de caracter vai para AL
02h --> imprime um caracter simples que estiver em DL

Registrador Base para o Registrador Interno, pois apenas os RI chamam eles mesmos.





qualquer endereço com X --> 16 bits
qualquer endereço com H ou L --> 8 bits

------------------------------------------------

.model small
.data     
    msg1 db "primeiro numero: $"    


.code
    
    newLine macro 
        mov dl, 0ah
        mov ah, 02h
        int 21h
        
        mov dl, 0dh
        mov ah, 02h
        int 21h
    endm
            
    printf macro msg
        lea dx, msg
        mov ah, 09h
        int 21h
    endm     
    
    printc macro char
        mov dl, char 
        mov ah, 02h
        int 21h
    endm
    
    scan macro
        mov ah, 01h
        int 21h
    endm
        
        
        
        
    mov ax, @data
    mov ds, ax
                    
    mov si, 00h                
                    
    printc msg1[SI]
    printc msg1[SI+1]
    printc msg1[SI+2]
    printc msg1[SI+3]
        

    final:
        mov ah, 4ch
        int 21h
end



------------------------------------------------
.model small
.data     
    msg1 db "primeiro numero: $"    
    msg2 db "segundo numero: $"   
    msg3 db "O que voce quer fazer: $"
    msg4 db "A soma eh: $"
    msg5 db "A subtracao eh: $"
    msg6 db "A multiplicacao eh: $"
    msg7 db "A divisao eh: $"


.code
    
    newLine macro 
        mov dl, 0ah
        mov ah, 02h
        int 21h
        
        mov dl, 0dh
        mov ah, 02h
        int 21h
    endm
            
    printf macro msg
        lea dx, msg
        mov ah, 09h
        int 21h
    endm
    
    scan macro
        mov ah, 01h
        int 21h
    endm
        
        
        
        
    mov ax, @data
    mov ds, ax
    
    printf msg1
    newLine
    scan
    mov bh, al
    
    newLine
    printf msg2
    newLine
    scan
    mov bl, al
    
    newLine
    printf msg3
    newLine
    scan
    
    cmp al,2bh
    je soma
    
    cmp al, 2dh
    je subtracao
           
    cmp al,2ah
    je multiplicacao 
           
    

    soma:
        newLine
        sub bh, 30h             
        add bh, bl
        printf msg4
        mov dl, bh
        mov ah, 02h
        int 21h
        jmp final
    
    subtracao:
        newLine
        add bh, 30h            
        sub bh, bl
        printf msg5
        mov dl, bh
        mov ah, 02h
        int 21h
        jmp final
    
    multiplicacao:
        newLine
        sub bh, 30h
        sub bl, 30h
        mov al, bh
        mul bl
        mov bl, al 
        add bl, 30h
        printf msg6
        mov dl, bl
        mov ah, 02h
        int 21h
        jmp final

         

    final:
        mov ah, 4ch
        int 21h
end


 ---------------------------------------------

 calc de soma -->

.model small
.data
    msg1 db "primeiro numero:$"    
    msg2 db "segundo numero:$"   
    msg3 db "A soma eh:$"
  
.code
    mov ax, @data
    mov ds, ax
    
    lea dx, msg1
    mov ah, 09h
    int 21h
    
    mov ah, 01h
    int 21h
    mov bh, al
    
    lea dx, msg2
    mov ah, 09h
    int 21h
    
    mov ah, 01h
    int 21h
    mov bl, al
                 
         
    sub bh, 30h             
    add bh, bl
             
    
    lea dx, msg3
    mov ah, 09h
    int 21h
    
    mov dl, bh
    mov ah, 02h
    int 21h
   
   
end

--------------------------------------

.model small
.data     
    msg1 db "primeiro numero:$"    
    msg2 db "segundo numero:$"   
    msg3 db "A soma eh:$"
    

-- Macros --
        
printf macro msg
    lea dx, msg
    mov ah, 09h
    int 21h
endm


    
newLine macro 
    mov dl, 0ah
    mov ah, 02h
    int 21h
    
    mov dl, 0dh
    mov ah, 02h
    int 21h
endm


    
scan macro
    mov ah, 01h
    int 21h
endm

-- Fim dos macros --
         
         
mov ax, @data
mov ds, ax


printf msg1
newLine
scan
mov bh, al


newLine
printf msg2
newLine
scan
mov bl, al
           
      
sub bh, 30h
add bh, bl
       
           
newLine           
printf msg3
printf 

--------------------------------------

    
    cmp ah, 2dh
    je subtracao


Offset is the displacement of the memory location from the starting location of the segment. The 8086 addresses a segmented memory. The complete physical address which is 20-bits long is generated using segment and offset registers each of the size 16-bit.

https://old.amu.ac.in/emp/studym/100019515.pdf

The segment register points to the start of a segment, while the offset specifies the location of a specific byte within(dentro, no interior) the segment



User: ISHAAN,glaitm 
Key:27R3VDEFYFX4N0VC3FRTQZX